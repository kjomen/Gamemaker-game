<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MChar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing variables
grav = .3;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 2;
direct = 1;
image_index = 0;
image_speed = 0;
maxhp = 100;
hp = maxhp;
hpregen = 0.01;
hpadd = hpregen;
dmg_reduction = 5;
incoming_dmg = 0;
dmgr = dmg_reduction;
shield_dmgr = 90;
dead = false;
deadwait = false;

view_hview[0] = view_hport[0] / 2;
view_wview[0] = view_wport[0] / 2;

//keys

key_left = vk_left;
key_right = vk_right;
key_down = vk_down;
key_up = 0;
key_jump = vk_up;
key_exit = vk_escape;
key_fullscreen = vk_f11;

//Basic 1
key_basic_1 = ord("A");
can_basic_1 = true;
cd_basic_1 = false;
basic_1_delay = 5;
basic_1_cooldown = 25;

//Basic shield
basic_shield = false;
key_basic_shield = ord("D");
can_basic_shield = true;
cd_basic_shield = false;
basic_shield_delay = 5;
basic_shield_cooldown = 120;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating rest of body

instance_create(x,y,obj_McharArm);
instance_create(x,y,obj_MCharFoot);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic attack cooldown
cd_basic_shield = false;
can_basic_shield = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic attack cooldown
cd_basic_1 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic attack wait
can_basic_1 = true;
instance_create(x,y,obj_basicUNproj);
alarm[1] = basic_1_cooldown;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sounds
if keyboard_check_pressed(key_jump) and place_meeting(x,y+1,obj_BasicFloor) and basic_shield = false {
    audio_play_sound(snd_jump,1,false);
}
if keyboard_check_pressed(key_basic_1) and can_basic_1 and cd_basic_1 = false and basic_shield = false {
    audio_play_sound(snd_shoot,1,false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
key_right_check = keyboard_check(key_right);
key_left_check = -keyboard_check(key_left);
key_jump_check = keyboard_check_pressed(key_jump);
key_up_check = -keyboard_check(key_up);
key_down_check = keyboard_check_pressed(key_down);
key_fullscreen_check = keyboard_check_pressed(key_fullscreen);
scr_camera();
if keyboard_check(key_exit) {
    game_end();
}
if basic_shield = false {
move = key_left_check + key_right_check;
hsp = move * movespeed;

if (place_meeting(x,y+1,obj_BasicFloor)) {
    //if key_jump_check audio_play_sound(snd_jump,1,0);
    vsp = key_jump_check * -jumpspeed;
} else {
    if key_down_check and vsp &lt; 0 {
        vsp = jumpspeed / 2;
    }
}
} else {
    move = 0;
    hsp = 0;
}
if (vsp &lt; 10) vsp += grav;
if key_fullscreen_check {

if window_get_fullscreen() {
    window_set_fullscreen(false);
} else {
    window_set_fullscreen(true);
    }
}

//horisontal collision
if (place_meeting(x+hsp,y,obj_BasicFloor)) {
    while(!place_meeting(x+sign(hsp),y,obj_BasicFloor)) {
        x += sign(hsp);
    }
    hsp = 0;
}
//x += hsp;
hspeed = hsp;
//vertical collision
if (place_meeting(x,y+vsp,obj_BasicFloor)) {
    while(!place_meeting(x,y+sign(vsp),obj_BasicFloor)) {
        y += sign(vsp);
    }
    vsp = 0;
}
//y += vsp;
vspeed = vsp;

if hsp &gt; 0 {
    direct = 1;
}
if hsp &lt; 0 {
    direct = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacks
//Basic 1
key_basic_check_1 = keyboard_check_pressed(key_basic_1);
key_basic_shield_pressed = keyboard_check_pressed(key_basic_shield);
key_basic_shield_released = keyboard_check_released(key_basic_shield);

if key_basic_check_1 and can_basic_1 and cd_basic_1 = false and basic_shield = false {
    alarm[0] = basic_1_delay;
    can_basic_1 = false;
    cd_basic_1 = true;
}
//Basic shield
if key_basic_shield_pressed and can_basic_shield and cd_basic_shield = false and basic_shield = false {
    can_basic_shield = false;
    cd_basic_shield = true;
    basic_shield = true;
    dmgr = dmg_reduction + shield_dmgr;
}
if key_basic_shield_released and basic_shield = true{
    basic_shield = false;
    alarm[2] = basic_shield_cooldown;
    dmgr = dmg_reduction;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image index
if basic_shield = true {
    image_index = 1;
} else image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with enemy

if distance_to_object(obj_DebugEnemy) = 0{
    if basic_shield = false {
        hp -= 1;
    } else {
        hp -= 0.2;
    }
}

if hp &lt; 0 hp = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regen
hpadd = hpregen +(basic_shield / 25);
hp += hpadd

if hp &gt; maxhp {
    hp = maxhp;
}

if hp = maxhp {
    hpadd = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Incoming damage
var dmg
if incoming_dmg &gt; 0 {
    dmg = incoming_dmg / 100 * (100 - dmgr);
    hp -= dmg;
    incoming_dmg = 0;
    dmg = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUGGING

if keyboard_check_pressed(ord("R")) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dieing

if hp &lt;= 0 {
    dead = true;
    if deadwait = false {
        deadwait = true;
        alarm[3] = 120;
    }
}

if dead {
    hp = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background music
audio_play_sound(snd_overworldgrass,0,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flipping
draw_self();

if direct = 0 {
    image_xscale = -1;
}
if direct = 1 {
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxhp += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,14</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
